#%RAML 0.8
---
title: Comet Server
version: v1

/accounts:
  /login:
    post:
      description: logs in an User with provided credentials and returns a session token.
      body:
        application/json:
          example: |
                   {
                    "email":"test@test.com",
                    "password":"testtest"
                   }
      responses:
        200:
          description: OK
          body:
            application/json:
              example: |
                      {
                        "token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjYsImVtYWlsIjoidGVzdEB0ZXN0LmNvbSIsImFsaWFzIjoidGVzdF9uYW1ldGVzdF9sYXN0X25hbWUiLCJleHAiOjE0NDMxNTI0ODcsImlhdCI6MTQ0MDU2MDQ4N30.b27aiyshkp8f1XbpMoaL57s_OSASmf8ZPHt0VVQN6yg"
                      }

  /logout:
    post:
      description: Destroy currently logged User's session
      responses:
        302:

  /confirm:
    post:
      description: Allows User Account confirmation with token previously sent via email.
      body:
        application/json:
          example: |
                   {
                    "token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjUsImFjdGlvbiI6InJlY292ZXIiLCJleHAiOjE0NDA5MDA1NjUsImlhdCI6MTQ0MDg5OTM2NX0.BcimZBODaEjKclxkbQr4nICVZpvqzbweEGNZ_68G_dw"
                   }
      responses:
        200:

    /token:
      post:
        description: Resends User's Account confirmation link via email.
        headers:
          Authorization:
           description: |
             Token returned by login service to check if currently logged User is authorized to perform this action.
           type: string
           required: true
           example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
        responses:
          200:

  /reopen:
    post:
      description: Allows User to reopen his Comet Account, setting a new password. Token previously retrieved from /reopen/token
      body:
        application/json:
          example: |
                   {
                    "token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjUsImFjdGlvbiI6InJlY292ZXIiLCJleHAiOjE0NDA5MDA1NjUsImlhdCI6MTQ0MDg5OTM2NX0.BcimZBODaEjKclxkbQr4nICVZpvqzbweEGNZ_68G_dw",
                    "newpassword":"the_new_password"
                   }
      responses:
        200:

    /token:
      post:
        description: User gets an email with a token to reopen its account.
        body:
          application/json:
            example: |
                     {
                      "email":"test@test.com"
                     }
        responses:
          200:

  /password:
    /token:
      post:
        description: Sends password recovery token to User's email account, if account exists and is confirmed.
        body:
          application/json:
            example: |
                     {
                      "email":"test@test.com"
                     }
        responses:
          200:

    /recover:
      post:
        description: Sets new password to User account if provided token is valid.
        body:
          application/json:
            example: |
                     {
                     "token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjUsImFjdGlvbiI6InJlY292ZXIiLCJleHAiOjE0NDA5NTY4MDcsImlhdCI6MTQ0MDk1NTYwN30.F9MaUvOQY8ciz86IuUQq89jFKrq5u_LXpGEUbgPKahY",
                     "newpassword":"the_new_password"
                     }
        responses:
          200:

    /renew:
      post:
        description: Sets new password for currently logged user, if old password is correct.
        headers:
          Authorization:
           description: |
             Token returned by login service to check user is authorized to perform this action.
           type: string
           required: true
           example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
        body:
          application/json:
            example: |
                     {
                      "oldpassword":"the_old_password",
                      "newpassword":"the_new_password"
                     }
        responses:
          200:

/users:
  post:
    description: Create new User Account.
    body:
      application/json:
        example: |
                 {
                  "firstName":"test_name",
                  "lastName":"test_last_name",
                  "email":"test@test.com",
                  "password":"test_pass"
                 }
    responses:
      200:
        description:
        body:
          application/json:
            example: |
                    {
                      "token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjYsImVtYWlsIjoidGVzdEB0ZXN0LmNvbSIsImFsaWFzIjoidGVzdF9uYW1ldGVzdF9sYXN0X25hbWUiLCJleHAiOjE0NDMxNTI0ODcsImlhdCI6MTQ0MDU2MDQ4N30.b27aiyshkp8f1XbpMoaL57s_OSASmf8ZPHt0VVQN6yg"
                    }
  get:
    description: Get currently logged User's full Account information.
    headers:
      Authorization:
       description: |
         Token returned by login service to check if currently logged User is authorized to perform this action.
       type: string
       required: true
       example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
    responses:
      200:
        description:
        body:
          application/json:
            example: |
                    {
                      "user": {
                        "id": 1,
                        "firstName": "test",
                        "lastName": "test",
                        "alias": "testtest",
                        "email": "test@test.com",
                        "profilePicture": "null",
                        "confirmed": "true"
                      }
                    }

  put:
    description: Update currently logged User's Account information.
    headers:
      Authorization:
       description: |
         Token returned by login service to check if currently logged User is authorized to perform this action.
       type: string
       required: true
       example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
    body:
      application/json:
        example: |
                 {
                  "firstName":"test_name",
                  "lastName":"test_last_name",
                  "alias":"the best alias"
                 }
    responses:
      200:
        description: OK
        body:
          application/json:
            example: |
                    {
                      "token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjYsImVtYWlsIjoidGVzdEB0ZXN0LmNvbSIsImFsaWFzIjoidGVzdF9uYW1ldGVzdF9sYXN0X25hbWUiLCJleHAiOjE0NDMxNTI0ODcsImlhdCI6MTQ0MDU2MDQ4N30.b27aiyshkp8f1XbpMoaL57s_OSASmf8ZPHt0VVQN6yg"
                    }

  delete:
    description: Delete currently logged User's Account.
    headers:
      Authorization:
       description: |
         Token returned by login service to check if currently logged User is authorized to perform this action.
       type: string
       required: true
       example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
    body:
      application/json:
        example: |
                 {
                  "password":"test_pass"
                 }
    responses:
      302:

/projects:
  post:
    description: Create new User Project and invite members, if provided and valid.
    headers:
      Authorization:
       description: |
         Token returned by login service to check if currently logged User is authorized to perform this action.
       type: string
       required: true
       example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI

    body:
      application/json:
        example: |
                {
                  "name": "the_project_name",
                  "description": "the_project_description",
                  "members": [
                    {
                      "address": "jsaucedo.dev@gmail.com"
                    },
                    {
                      "address": "juan.ignacio.saucedo@gmail.com"
                    },
                    {
                      "address": "juan.ignacio.saucedo@gmail"
                    }
                  ]
                }
    responses:
      200:
        description:
        body:
          application/json:
            example: |
              {
                "id": 33,
                "name": "the_project_name",
                "description": "the_project_desc",
                "createdAt": "2015-09-25T00:25:55.469Z",
                "isOwner": true,
                "state": "C",
                "members": [
                  {
                    "id": 2,
                    "email": "themail@gmail.com",
                    "profilePicture": "/static/0.33087815903127193juavatar.png",
                    "firstName": "first_name",
                    "lastName": "last_name",
                    "alias": "alias",
                    "createdAt": "2015-09-15T04:13:54.564Z"
                  }
                ],
                "integrations": []
              }
  get:
    description: Get all currently logged User Project's information. Active Projects, showing first the most recently created.
    headers:
      Authorization:
       description: |
         Token returned by login service to check if currently logged User is authorized to perform this action.
       type: string
       required: true
       example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI

    responses:
      200:
        description:
        body:
          application/json:
            example: |
                      [
                        {
                          "id": 33,
                          "name": "the_project_name",
                          "description": "the_project_desc",
                          "createdAt": "2015-09-25T00:25:55.469Z",
                          "isOwner": true,
                          "state": "C",
                          "members": [
                            {
                              "id": 2,
                              "email": "themail@gmail.com",
                              "profilePicture": "/static/0.33087815903127193juavatar.png",
                              "firstName": "first_name",
                              "lastName": "last_name",
                              "alias": "alias",
                              "createdAt": "2015-09-15T04:13:54.564Z"
                            }
                          ],
                          "integrations": []
                        },
                        {
                          "id": 34,
                          "name": "the_project_name",
                          "description": "the_project_desc",
                          "createdAt": "2015-09-25T00:25:55.469Z",
                          "isOwner": true,
                          "state": "C",
                          "members": [
                            {
                              "id": 2,
                              "email": "themail@gmail.com",
                              "profilePicture": "/static/0.33087815903127193juavatar.png",
                              "firstName": "first_name",
                              "lastName": "last_name",
                              "alias": "alias",
                              "createdAt": "2015-09-15T04:13:54.564Z"
                            }
                          ],
                          "integrations": []
                        }
                      ]

  /{id}:
    get:
      description:  Get project's information.
      headers:
        Authorization:
         description: |
           Token returned by login service to check if currently logged User is authorized to perform this action.
         type: string
         required: true
         example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI

      responses:
        200:
          description:
          body:
            application/json:
              example: |
                {
                  "id": 33,
                  "name": "the_project_name",
                  "description": "the_project_desc",
                  "createdAt": "2015-09-25T00:25:55.469Z",
                  "isOwner": true,
                  "state": "C",
                  "members": [
                    {
                      "id": 2,
                      "email": "themail@gmail.com",
                      "profilePicture": "/static/0.33087815903127193juavatar.png",
                      "firstName": "first_name",
                      "lastName": "last_name",
                      "alias": "alias",
                      "createdAt": "2015-09-15T04:13:54.564Z"
                    }
                  ],
                  "integrations": []
                }
    put:
      description: Update a Project of currently logged User ownership.
      headers:
        Authorization:
         description: |
           Token returned by login service to check if currently logged User is authorized to perform this action.
         type: string
         required: true
         example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
      body:
        application/json:
          example: |
            {
                "name": "the_updated_project_name",
                "description": "the_updated_project_description"
            }
      responses:
        200:
          description:
          body:
            application/json:
              example: |
                {
                  "id": 33,
                  "name": "the_project_name",
                  "description": "the_project_desc",
                  "createdAt": "2015-09-25T00:25:55.469Z",
                  "isOwner": true,
                  "state": "C",
                  "members": [
                    {
                      "id": 2,
                      "email": "themail@gmail.com",
                      "profilePicture": "/static/0.33087815903127193juavatar.png",
                      "firstName": "first_name",
                      "lastName": "last_name",
                      "alias": "alias",
                      "createdAt": "2015-09-15T04:13:54.564Z"
                    }
                  ],
                  "integrations": []
                }

    delete:
      description: Delete a Project of currently logged User ownership.
      headers:
        Authorization:
         description: |
           Token returned by login service to check if currently logged User is authorized to perform this action.
         type: string
         required: true
         example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
      responses:
        200:

    /close:
      delete:
        description: Closes a Project of currently logged User ownership.
        headers:
          Authorization:
           description: |
             Token returned by login service to check if currently logged User is authorized to perform this action.
           type: string
           required: true
           example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
        responses:
          200:

    /calls:
      get:
        description: Retrieve all the Calls of provided channel_id
        headers:
          Authorization:
           description: |
             Token returned by login service to check if currently logged User is authorized to perform this action.
           type: string
           required: true
           example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
        responses:
          200:
            body:
              application/json:
                example: |
                  [
                    {
                      "id": 1,
                      "summary": "null",
                      "startHour": "2016-03-26T18:56:47.422Z",
                      "endHour": ""null"",
                      "frontendId": "null",
                      "createdAt": "2016-03-26T18:56:47.432Z",
                      "updatedAt": "2016-03-26T18:56:47.432Z",
                      "ChannelId": 1,
                      "OwnerId": 1002,
                      "members": [
                        {
                          "id": 1,
                          "alias": "SaucedoJI",
                          "profilePicture": "/static/profilePicture-1002-1457846872245.jpg",
                          "createdAt": "2016-03-26T18:56:47.716Z",
                          "updatedAt": "2016-03-26T18:56:47.716Z",
                          "CallId": 1,
                          "UserId": 1002
                        }
                      ]
                    },
                    {
                      "id": 34,
                      "summary": "null",
                      "startHour": "2016-03-27T02:51:39.577Z",
                      "endHour": "null",
                      "frontendId": "null",
                      "createdAt": "2016-03-27T02:51:39.587Z",
                      "updatedAt": "2016-03-27T02:51:39.587Z",
                      "ChannelId": 1,
                      "OwnerId": 1002,
                      "members": [
                        {
                          "id": 34,
                          "alias": "SaucedoJI",
                          "profilePicture": "/static/profilePicture-1002-1457846872245.jpg",
                          "createdAt": "2016-03-27T02:51:40.119Z",
                          "updatedAt": "2016-03-27T02:51:40.119Z",
                          "CallId": 34,
                          "UserId": 1002
                        }
                      ]
                    },
                    {
                      "id": 37,
                      "summary": "null",
                      "startHour": "2016-03-27T03:25:25.694Z",
                      "endHour": "null",
                      "frontendId": "null",
                      "createdAt": "2016-03-27T03:25:25.708Z",
                      "updatedAt": "2016-03-27T03:25:25.708Z",
                      "ChannelId": 1,
                      "OwnerId": 1002,
                      "members": [
                        {
                          "id": 37,
                          "alias": "SaucedoJI",
                          "profilePicture": "/static/profilePicture-1002-1457846872245.jpg",
                          "createdAt": "2016-03-27T03:25:26.243Z",
                          "updatedAt": "2016-03-27T03:25:26.243Z",
                          "CallId": 37,
                          "UserId": 1002
                        }
                      ]
                    }
                  ]

      post:
        description: Creates a new Call and associates it to provided channel_id. Server adds startHour. Also, a message is created at 'Messages' table and a notification is pushed. Also currently logged user is associated.
        headers:
          Authorization:
           description: |
             Token returned by login service to check if currently logged User is authorized to perform this action.
           type: string
           required: true
           example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
        body:
          application/json:
            example: |
              {
                "frontend_id": "asd-123"
              }
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    "id": 43,
                    "summary": "null",
                    "startHour": "2016-04-05T03:31:57.554Z",
                    "endHour": "null",
                    "frontendId": "asd-123",
                    "createdAt": "2016-04-05T03:31:57.566Z",
                    "updatedAt": "2016-04-05T03:31:57.566Z",
                    "ChannelId": 1,
                    "OwnerId": 1002,
                    "members": [
                      {
                        "id": 45,
                        "alias": "SaucedoJI",
                        "profilePicture": "/static/profilePicture-1002-1457846872245.jpg",
                        "createdAt": "2016-04-05T03:31:58.002Z",
                        "updatedAt": "2016-04-05T03:31:58.002Z",
                        "CallId": 43,
                        "UserId": 1002
                      }
                    ]
                  }

      /{call_id}:
        get:
          description: Retrieve a certain call by id.
          headers:
            Authorization:
             description: |
               Token returned by login service to check if currently logged User is authorized to perform this action.
             type: string
             required: true
             example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
          responses:
            200:
              body:
                application/json:
                  example: |
                    {
                      "id": 42,
                      "summary": ""null"",
                      "startHour": "2016-04-05T02:54:11.363Z",
                      "endHour": ""null"",
                      "frontendId": ""null"",
                      "createdAt": "2016-04-05T02:54:11.372Z",
                      "updatedAt": "2016-04-05T02:54:11.372Z",
                      "ChannelId": 1,
                      "OwnerId": 1002,
                      "members": [
                        {
                          "id": 43,
                          "alias": "SaucedoJI",
                          "profilePicture": "/static/profilePicture-1002-1457846872245.jpg",
                          "createdAt": "2016-04-05T02:54:11.799Z",
                          "updatedAt": "2016-04-05T02:54:11.799Z",
                          "CallId": 42,
                          "UserId": 1002
                        }
                      ]
                    }

        put:
          description: Updates a Call (end date and frontend_id).
          headers:
            Authorization:
             description: |
               Token returned by login service to check if currently logged User is authorized to perform this action.
             type: string
             required: true
             example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
          body:
           application/json:
            example: |
              {
                "end_hour": "2016-04-05T03:55:11.363Z",
                "frontend_id": "asd-124"
              }

          responses:
            200:
              body:
               application/json:
                example: |
                  {
                    "id": 43,
                    "summary": "null",
                    "startHour": "2016-04-05T03:31:57.554Z",
                    "endHour": "2016-04-05T03:55:11.363Z",
                    "frontendId": "asd-124",
                    "createdAt": "2016-04-05T03:31:57.566Z",
                    "updatedAt": "2016-04-05T03:34:05.996Z",
                    "ChannelId": 1,
                    "OwnerId": 1002,
                    "members": [
                      {
                        "id": 45,
                        "alias": "SaucedoJI",
                        "profilePicture": "/static/profilePicture-1002-1457846872245.jpg",
                        "createdAt": "2016-04-05T03:31:58.002Z",
                        "updatedAt": "2016-04-05T03:31:58.002Z",
                        "CallId": 43,
                        "UserId": 1002
                      }
                    ]
                  }

        /members:
          put:
            description: Server stores currently logged User as a member of the Call with provided Id. Server guarantees uniqueness of members.
            headers:
              Authorization:
               description: |
                 Token returned by login service to check if currently logged User is authorized to perform this action.
               type: string
               required: true
               example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
            responses:
              200:
                body:
                  application/json:
                    example: |
                      {
                        "id": 40,
                        "summary": "el resumen 2",
                        "startHour": "2016-03-27T03:27:31.941Z",
                        "endHour": "2016-03-27T03:29:03.274Z",
                        "frontendId": "null",
                        "createdAt": "2016-03-27T03:27:31.943Z",
                        "updatedAt": "2016-03-27T03:29:03.275Z",
                        "ChannelId": 1,
                        "OwnerId": 1002,
                        "members": [
                          {
                            "id": 40,
                            "alias": "SaucedoJI",
                            "profilePicture": "/static/profilePicture-1002-1457846872245.jpg",
                            "createdAt": "2016-03-27T03:27:32.170Z",
                            "updatedAt": "2016-03-27T03:27:32.170Z",
                            "CallId": 40,
                            "UserId": 1002
                          },
                          {
                            "id": 41,
                            "alias": "DiegoM",
                            "profilePicture": "/images/avatars/0.2448105465155095juliogascoavatar.png",
                            "createdAt": "2016-03-27T03:29:26.783Z",
                            "updatedAt": "2016-03-27T03:29:26.783Z",
                            "CallId": 40,
                            "UserId": 1001
                          }
                        ]
                      }

        /summary:
          put:
            description: Add a summary to the Call with provided id.
            headers:
              Authorization:
               description: |
                 Token returned by login service to check if currently logged User is authorized to perform this action.
               type: string
               required: true
               example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
            responses:
              200:
                body:
                  application/json:
                    example: |
                      {
                        "id": 42,
                        "summary": "resumen de llamada",
                        "startHour": "2016-04-05T02:54:11.363Z",
                        "endHour": "2016-04-05T03:28:52.097Z",
                        "frontendId": "null",
                        "createdAt": "2016-04-05T02:54:11.372Z",
                        "updatedAt": "2016-04-05T03:28:52.099Z",
                        "ChannelId": 1,
                        "OwnerId": 1002,
                        "members": [
                          {
                            "id": 44,
                            "alias": "SaucedoJI",
                            "profilePicture": "/static/profilePicture-1002-1457846872245.jpg",
                            "createdAt": "2016-04-05T03:23:02.416Z",
                            "updatedAt": "2016-04-05T03:23:02.416Z",
                            "CallId": 42,
                            "UserId": 1002
                          }
                        ]
                      }

    /members:
      /{member_id}:
        delete:
          description: Allows currently logged User to remove a Project's member if currently logged User is the Project's owner.
          headers:
            Authorization:
             description: |
               Token returned by login service to check if currently logged User is authorized to perform this action.
             type: string
             required: true
             example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
          responses:
            200:

    /invitations:
      post:
        description:  Sends invitations to be part of a project to provided email accounts.
        headers:
          Authorization:
           description: |
             Token returned by login service to check if currently logged User is authorized to perform this action.
           type: string
           required: true
           example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI

        body:
          application/json:
            example: |
                    {
                      "addresses": [
                        {
                          "address": "test1@test1.com"
                        },
                        {
                          "address": "test2@test2.com"
                        }
                      ]
                    }

        responses:
          200:

      /accept:
        post:
          description: Allows currently logged User to accept an invitation to a Project.
          headers:
            Authorization:
             description: |
               Token returned by login service to check if currently logged User is authorized to perform this action.
             type: string
             required: true
             example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
          body:
            application/json:
              example: |
                       {
                        "token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjUsImFjdGlvbiI6InJlY292ZXIiLCJleHAiOjE0NDA5MDA1NjUsImlhdCI6MTQ0MDg5OTM2NX0.BcimZBODaEjKclxkbQr4nICVZpvqzbweEGNZ_68G_dw"
                       }
          responses:
            200:

    /channels:
      post:
        description: Create new Channel.
        headers:
          Authorization:
           description: |
             Token returned by login service to check if currently logged User is authorized to perform this action.
           type: string
           required: true
           example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
        body:
          application/json:
            schema: |
              {
                "properties": {
                    "name": {
                        "required": true,
                        "type": "string"
                    },
                    "description": {
                        "required": true,
                        "type": "string"
                    },
                    "type": {
                        "required": true,
                        "type": "char",
                        "allowd_values":"S and P"
                    },
                    "members": {
                        "required": false,
                        "type": "array"
                    }
                },
                "required": true,
                "type": "object"
              }
            example: |
              {
                "name":"the_channel_name",
                "description":"the_channel_desc",
                "type":"S",
                "members":[
                          {
                            "id":1
                          },
                          {
                            "id":2
                          }
                          ]
              }
        responses:
          200:
            description:
            body:
              application/json:
                example: |
                  {
                    "id": 3,
                    "name": "the first channel",
                    "description": "the desc",
                    "createdAt": "2015-10-03T14:25:51.870Z",
                    "type": "S",
                    "state": "O",
                    "members": [
                      {
                        "id": 2,
                        "email": "user@gmail.com",
                        "profilePicture": "/static/0.33087815903127193avatar.png",
                        "firstName": "first_name",
                        "lastName": "last_name",
                        "alias": "alias",
                        "createdAt": "2015-09-15T04:13:54.564Z"
                      }
                    ],
                    "integrations": []
                  }

      get:
        description: Get all Project's Channels information ordered by createdAt date showing the last created first.
        headers:
          Authorization:
           description: |
             Token returned by login service to check if currently logged User is authorized to perform this action.
           type: string
           required: true
           example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
        responses:
          200:
            description:
            body:
              application/json:
                example: |
                  [
                    {
                      "id": 3,
                      "name": "the first channel",
                      "description": "the desc",
                      "createdAt": "2015-10-03T14:25:51.870Z",
                      "type": "S",
                      "state": "O",
                      "members": [
                        {
                          "id": 2,
                          "email": "member1@gmail.com",
                          "profilePicture": "/static/0.33087815903127193avatar.png",
                          "firstName": "member",
                          "lastName": "member",
                          "alias": "mebermember",
                          "createdAt": "2015-09-15T04:13:54.564Z"
                        }
                      ],
                      "integrations": []
                    },
                    {
                      "id": 2,
                      "name": "the second channel",
                      "description": "the desc",
                      "createdAt": "2015-10-01T02:59:50.280Z",
                      "type": "S",
                      "state": "O",
                      "members": [
                        {
                          "id": 2,
                          "email": "member2@gmail.com",
                          "profilePicture": "/static/0.33087815903127193saucedojuavatar.png",
                          "firstName": "member2",
                          "lastName": "member2",
                          "alias": "membermember2",
                          "createdAt": "2015-09-15T04:13:54.564Z"
                        }
                      ],
                      "integrations": []
                    }
                  ]

      /{channel_id}:
        get:
          description: Get Channel's information.
          headers:
            Authorization:
             description: |
               Token returned by login service to check if currently logged User is authorized to perform this action.
             type: string
             required: true
             example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
          responses:
            200:
              description:
              body:
                application/json:
                  example: |
                    {
                      "id": 3,
                      "name": "the first channel",
                      "description": "the desc",
                      "createdAt": "2015-10-03T14:25:51.870Z",
                      "type": "S",
                      "state": "O",
                      "members": [
                        {
                          "id": 2,
                          "email": "member1@gmail.com",
                          "profilePicture": "/static/0.33087815903127193avatar.png",
                          "firstName": "member",
                          "lastName": "member",
                          "alias": "mebermember",
                          "createdAt": "2015-09-15T04:13:54.564Z"
                        }
                      ],
                      "integrations": []
                    }
        /members:
          put:
            description: Allows Project's User to add other Project's Users to a Project's Channel.
            headers:
              Authorization:
               description: |
                 Token returned by login service to check if currently logged User is authorized to perform this action.
               type: string
               required: true
               example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
            body:
              application/json:
                schema: |
                  {
                    "properties": {
                        "members": {
                            "required": true,
                            "type": "array"
                        }
                    },
                    "required": true,
                    "type": "object"
                  }
                example: |
                  {
                    "members":[
                              {
                                "id":1
                              },
                              {
                                "id":2
                              }
                              ]
                  }
            responses:
              200:
                description:
                body:
                  application/json:
                    example: |
                      {
                        "id": 3,
                        "name": "the first channel",
                        "description": "the desc",
                        "createdAt": "2015-10-03T14:25:51.870Z",
                        "type": "S",
                        "state": "O",
                        "members": [
                          {
                            "id": 1,
                            "email": "member1@gmail.com",
                            "profilePicture": "/static/0.33087815903127193avatar.png",
                            "firstName": "member",
                            "lastName": "member",
                            "alias": "mebermember",
                            "createdAt": "2015-09-15T04:13:54.564Z"
                          },
                          {
                            "id": 2,
                            "email": "member1@gmail.com",
                            "profilePicture": "/static/0.33087815903127193avatar.png",
                            "firstName": "member",
                            "lastName": "member",
                            "alias": "mebermember",
                            "createdAt": "2015-09-15T04:13:54.564Z"
                          }
                        ],
                        "integrations": []
                      }
        delete:
          description: Delete a Channel of a Project.
          headers:
            Authorization:
             description: |
               Token returned by login service to check if currently logged User is authorized to perform this action.
             type: string
             required: true
             example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
          responses:
            200:

        /close:
          delete:
            description: Close a Project's Channel.
            headers:
              Authorization:
               description: |
                 Token returned by login service to check if currently logged User is authorized to perform this action.
               type: string
               required: true
               example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI
            responses:
              200:

        /messages:
          /{message_id}:
            get:
              description: Retrieve Channel's messages by id, and some surrounding messages.

              queryParameters:
                limit:
                      displayName: limit
                      type: integer
                      description: max amount of messages to be returned from provided id.
                      example: 5
                      required: false
                direction:
                          displayName: direction
                          type: string
                          description: Direction of the surrounding messages from the one with provided id. Options are backwards or forwards.
                          example: backwards
                          required: false
              headers:
                Authorization:
                 description: |
                   Token returned by login service to check if currently logged User is authorized to perform this action.
                 type: string
                 required: true
                 example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI

              responses:
                200:
                  description: Notice that provided example response body is related to a 'common' Channel. On 'direct' Channels, response body is different, check "search/projects/:project_id/messages" response.
                  body:
                    application/json:
                      example: |
                        {
                          "messages": [
                            {
                              "message": {
                                "id": 20,
                                "text": "ja",
                                "link": "",
                                "user": 3,
                                "type": 1,
                                "date": "2016-01-25T01:59:41.349Z",
                                "integrationId": "null"
                              }
                            }
                          ]
                        }

/search:
  /projects:
    /{project_id}:
      /users:
        get:
          description: Get Project's Users whose email, firstName, lastName or alias match provided string. No partial matches, only full words. |
                        In case more than one word is provided, search engine will return records which fully match those words.

          queryParameters:
           q:
             displayName: q
             type: string
             description: search string
             example: Mary Roach
             required: true

          headers:
            Authorization:
             description: |
               Token returned by login service to check if currently logged User is authorized to perform this action.
             type: string
             required: true
             example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI

          responses:
            200:
              description: Collection of Users that match provided search string within provided project.
              body:
                application/json:
                  example: |
                    {
                      "users": [
                        {
                          "id": user_id,
                          "alias": "useralias",
                          "firstName": "userName",
                          "lastName": "userLastName",
                          "email": "user@email.com",
                          "profilePicture":"/path/to/file"
                        }
                      ]
                    }
            400:
              description: Server rejected the request for several reasons, take a look at the result.
              body:
                application/json:
                  example: |
                    {
                      "errors": {
                        "q": "Por favor ingrese una cadena de búsqueda válida.",
                        "project_id": 'Por favor ingrese el id de proyecto.'
                      }
                    }
            403:
              description: Provided User does not have access to requested Project's information.
              body:
                application/json:
                  example: |
                    {
                      "errors": {
                        "all": "El usuario no puede acceder al proyecto solicitado."
                      }
                    }
            404:
              description: Provided Project could not be found.
              body:
                application/json:
                  example: |
                    {
                      "errors": {
                        "all": "No se puede encontrar ningún proyecto con el id provisto."
                      }
                    }

      /messages:
        get:
          description: Look for messages whose content includes provided search parameter within the Project's Channels the currently logged User is allowed to see.
          queryParameters:
           q:
             displayName: q
             type: string
             description: search string
             example: Juan
             required: true
           limit:
             displayName: limit
             type: integer
             description: max amount of results to be returned
             example: 10
             required: false
             default: 25
           last_id:
            displayName: last_id
            type: integer
            description: id to start search from
            example: 1
            required: false
           in_direct:
            displayName: in_direct
            type: boolean
            description: if true, search is performed in direct channels. If not, in common ones.
            example: true
            required: true

          headers:
            Authorization:
             description: |
               Token returned by login service to check if currently logged User is authorized to perform this action.
             type: string
             required: true
             example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI

          responses:
            200:
              description: Collection of Messages that match provided search string within provided Project's common&direct Channels.
              body:
                application/json:
                  example: |
                    {
                      "project": {
                        "channels": {
                          "direct": [
                            {
                              "id": "Direct_1_3",
                              "messages": [
                                {
                                  "id": 8,
                                  "content": "the content2",
                                  "OriginUserId": 3,
                                  "DestinationUserId": 1,
                                  "ProjectId": 2,
                                  "MessageTypeId": 1,
                                  "channel": "Direct_1_3",
                                  "sentDateTimeUTC": "2015-11-01T20:03:55.048Z"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
            400:
              description: Server rejected the request for several reasons, take a look at the result.
              body:
                application/json:
                  example: |
                    {
                      "errors": {
                        "q": "Por favor ingrese una cadena de búsqueda válida.",
                        "project_id": 'Por favor ingrese el id de proyecto.'
                      }
                    }
            403:
              description: Provided User does not have access to requested Project's information.
              body:
                application/json:
                  example: |
                    {
                      "errors": {
                        "all": "El usuario no puede acceder al proyecto solicitado."
                      }
                    }
            404:
              description: Provided Project could not be found.
              body:
                application/json:
                  example: |
                    {
                      "errors": {
                        "all": "No se puede encontrar ningún proyecto con el id provisto."
                      }
                    }

        /channels:
          /{channel_id}:
            get:
              description: Look for messages whose content includes provided search paramater within the provided Channel if currently logged User is allowed to see it.
              queryParameters:
               q:
                 displayName: q
                 type: string
                 description: search string
                 example: Juan
                 required: true
               limit:
                 displayName: limit
                 type: integer
                 description: max amount of results to be returned
                 example: 10
                 required: false
                 default: 25
               last_id:
                displayName: last_id
                type: integer
                description: id to start search from
                example: 1
                required: false

              headers:
                Authorization:
                 description: |
                   Token returned by login service to check if currently logged User is authorized to perform this action.
                 type: string
                 required: true
                 example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjE4LCJlbWFpbCI6ImpAcy5jb20iLCJhbGlhcyI6ImpzIiwiZXhwIjoxNDQzMjAyNjA2LCJpYXQiOjE0NDA2MTA2MDZ9.r3G3_BsRtNJxaCKePgvuesHVgTqHNnWM1ON-XogogJI

              responses:
                200:
                  description: Collection of Messages that match provided search string within provided Channel. Notice that provided response example is for a search on a common channel. If search is over a direct channel, response won't include 'common' key but 'direct' key and the "messages" key structure will be equal to the exposed at "direct" key of "search/projects/:project_id/messages" response.
                  body:
                    application/json:
                      example: |
                        {
                          "project": {
                            "channels": {
                              "common": [
                                {
                                  "id": 39,
                                  "messages": [
                                    {
                                      "id": 20,
                                      "text": "je je",
                                      "user": 3,
                                      "type": 1,
                                      "date": "2016-01-25T01:59:41.349Z"
                                    },
                                    {
                                      "id": 18,
                                      "text": "je je",
                                      "user": 3,
                                      "type": 1,
                                      "date": "2016-01-25T01:59:41.349Z"
                                    },
                                    {
                                      "id": 11,
                                      "text": "je",
                                      "user": 3,
                                      "type": 1,
                                      "date": "2016-01-16T14:12:08.872Z"
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        }

                400:
                  description: Server rejected the request for several reasons, take a look at the result.
                  body:
                    application/json:
                      example: |
                        {
                          "errors": {
                            "q": "Por favor ingrese una cadena de búsqueda válida.",
                            "project_id": 'Por favor ingrese el id de proyecto.',
                            "channel_id":"Por favor ingrese el id de canal."
                          }
                        }
                403:
                  description: Provided User does not have access to requested Project's information.
                  body:
                    application/json:
                      example: |
                        {
                          "errors": {
                            "all": "El usuario no puede acceder al proyecto solicitado."
                          }
                        }
                404:
                  description: Provided Project could not be found.
                  body:
                    application/json:
                      example: |
                        {
                          "errors": {
                            "all": "No se puede encontrar ningún proyecto con el id provisto.",
                            "all2": "No se puede encontrar ningún canal con el id provisto."
                          }
                        }
